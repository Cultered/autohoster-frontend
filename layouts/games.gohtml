{{define "games2"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Latest hosted games" property="og:title">
		<meta content="Multihoster powered game autohosting solution" property="og:description">
		<meta content="https://tacticalpepe.me/games" property="og:url">
	</head>
	<body>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
		{{template "NavPanel" . }}
		<div class="px-4 py-5 my-5 container">
			<h3>Recent games</h3>
			<table class="table">
				<tr>
					<th>ID</th>
					<th>Time</th>
					<th>Map,<br>Settings</th>
					<th>Players</th>
				</tr>
				{{range $i, $e := .Games}}
				<tr>
					<td>{{$e.ID}}</td>
					<td>{{$e.TimeStarted}}{{if $e.Finished}}<br>({{GameTimeToStringI $e.GameTime}}){{end}}</td>
					<td>
						{{$e.MapName}}<br>
						<img class="icons icons-base{{$e.BaseLevel}}">
						<img class="icons icons-alliance{{allianceToClassI $e.Alliances}}">
						<img class="icons icons-scav{{boolto10 $e.Scavengers}}">
					</td>
					<td>
						<div class="container">
						<div class="row">
							{{if $e.Finished}}
							<div class="col-sm">
								{{range $k, $player := $e.Players}}
								{{if eq $player.Hash ""}}{{else}}
								{{if eq $player.Usertype "winner"}}
								<div class="row">
									<div class="col-sm games-winner-name">{{template "wzprofile" $player}}</div>
								</div>
								{{end}}
								{{end}}
								{{end}}
							</div>
							<div class="col-sm">
								{{range $k, $player := $e.Players}}
								{{if eq $player.Hash ""}}{{else}}
								{{if eq $player.Usertype "loser"}}
								<div class="row">
									<div class="col-sm games-loser-name">{{template "wzprofile" $player}}</div>
									<!-- <div class="col-sm games-loser-name" title="Hash: {{$player.Hash}}">{{$player.Name}}</div>
									<div class="col-sm">elo {{$player.EloDiff}}</div>
									<div class="col-sm">kills {{$player.Kills}}</div> -->
								</div>
								{{end}}
								{{end}}
								{{end}}
							</div>
							{{else}}
							<div class="col-sm">
								{{range $k, $player := $e.Players}}
								{{if eq $player.Hash ""}}{{else}}
								<div class="row">
									<div class="col-sm">{{template "wzprofile" $player}}</div>
								</div>
								{{end}}
								{{end}}
							</div>
							{{end}}
						</div>
						</div>
					</td>
					<td>
						{{if $e.Finished}}
						<a href="/games/{{$e.ID}}" class="btn btn-primary">More</a>
						{{else}}
						<button class="btn btn-primary" type="button" disabled>
							<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
							In game
						</button>
						{{end}}
					</td>
				</tr>
				{{end}}
			</table>
		</div>
	</body>
	<!-- Cloudflare Web Analytics --><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "7ec885fe35c644aca7c6ae861471372a"}'></script><!-- End Cloudflare Web Analytics -->
</html>
{{end}}
{{define "gamedetails2"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Autohosted game {{.Game.ID}}" property="og:title">
		<meta content="Map: {{.Game.MapName}} At: {{.Game.TimeStarted}} Game time: {{GameTimeToStringI .Game.GameTime}}" property="og:description">
		<meta content="https://tacticalpepe.me/games/{{.Game.ID}}" property="og:url">
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
		<script src="https://github.com/chartjs/chartjs-plugin-zoom/releases/download/v1.1.1/chartjs-plugin-zoom.min.js"></script>
	</head>
	<body>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
		{{template "NavPanel" . }}
		<div class="px-4 py-5 my-5 container">
			<!-- <pre>{{.}}</pre> -->
			{{with .Game}}
			<div class="row">
				<div class="col-sm">
					<h4>Game {{.ID}}</h4>
					<p>Map: {{.MapName}} ({{.MapHash}})</p>
					<p>When: {{.TimeStarted}} ({{GameTimeToStringI .GameTime}})</p>
					<p>Settings:
						<img class="icons icons-base{{.BaseLevel}}">
						<img class="icons icons-alliance{{allianceToClassI .Alliances}}">
						<img class="icons icons-scav{{boolto10 .Scavengers}}">
					</p>
				</div>
				<div class="col-sm">
					<img src="https://wz2100.euphobos.ru/maps/preview/{{.MapHash}}.png">
				</div>
			</div>
			<div class="container"><p>
				{{$first_specs_printed := "false"}}
				{{range $k, $player := .Players}}
					{{if eq $player.Usertype "spectator"}}
						{{if eq $first_specs_printed "false"}}
						{{$first_specs_printed = "true"}}
						Spectators:
						{{end}}
						{{$k}} : {{$player}}
					{{end}}
				{{end}}
			</p></div>
			<div class="container">
				<table class="table text-nowrap">
					<thead>
						<th>Players</th>
						<th>Position</th>
						<th>Elo transfer</th>
						<th>Kills</th>
						<th>Droid lost</th>
						<th>Units built</th>
						<th>Struct built</th>
						<th>Structure lost</th>
						<th>Power</th>
					</thead>
					<tbody>
						<tr><td>Winners</td></tr>
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "winner"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
							<span class="wz-color-{{$player.Colour}}"></span>
								{{$player.Name}}
							</td>
							<td>{{$player.Position}}</td>
							<td>{{$player.EloDiff}}</td>
							<td>{{$player.Kills}}</td>
							<td>{{$player.DroidLost}}</td>
							<td>{{$player.DroidBuilt}}</td>
							<td>{{$player.StructBuilt}}</td>
							<td>{{$player.StructLost}}</td>
							<td>{{$player.Power}}</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}

						<tr><td>Loosers</td></tr>
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "loser"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
								<span class="wz-color-{{$player.Colour}}"></span>
								{{$player.Name}}
							</td>
							<td>{{$player.Position}}</td>
							<td>{{$player.EloDiff}}</td>
							<td>{{$player.Kills}}</td>
							<td>{{$player.DroidLost}}</td>
							<td>{{$player.DroidBuilt}}</td>
							<td>{{$player.StructBuilt}}</td>
							<td>{{$player.StructLost}}</td>
							<td>{{$player.Power}}</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}
						
						{{$fighterLabelRowPrinted := false}}
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "fighter"}}
						{{if $fighterLabelRowPrinted}}{{else}}<tr><td>Fighters</td></tr>{{$fighterLabelRowPrinted = true}}{{end}}
						{{end}}
						{{end}}
						{{end}}
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "fighter"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
								<span class="wz-color-{{$player.Colour}}"></span>
								{{$player.Name}}
							</td>
							<td>{{$player.Position}} - {{$player.Team}}</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}
					</tbody>
				</table>
			</div>
			{{/*
			<div class="container">
				<table class="table">
					<thead>
						<tr>
							<th>Research</th>
							{{range $k, $player := .JMap.playerData}}
							{{if ne $k 0}}
							<th>{{$player.name}} ({{$player.playnum}})({{$k}})({{$player.position}})</th>
							{{end}}
							{{end}}
						</tr>
					</thead>
					<tbody>
						{{range $n, $p := .ResSorted}}
						<tr>
							<td>{{$n}}</td>
							{{range $nn, $rr := $p}}
							{{if ne $nn 0}}
							<td>{{$rr}}</td>
							{{end}}
							{{end}}
						</tr>
						{{end}}
					</tbody>
							<th>time</th>
						{{range $k, $player := .JMap.playerData}}
							<th class="wz-color-background-{{$player.colour}}">
							{{$player.name}}
							</th>
						{{end}}
						</tr>
					</thead>
					<tbtbody>
					{{range $r, $research := (index .Game.Map.extendedPlayerData 1).researchComplite}}
						<th>{{$r}}</th>
						<th>{{$research}}</th>
					{{end}}
					</tbtbody>
				</table>
			</div>*/}}
			<div class="container">
				<div class="btn-group" role="group" id="Switchbuttons">
				</div>
				<div>
					<div class="form-check form-switch">
						<input class="form-check-input" type="checkbox" id="stackedSwitch" onChange="ToggleStacked();">
						<label class="form-check-label" for="stackedSwitch">Stacked</label>
					</div>
					<!-- <div class="form-check form-switch">
						<input class="form-check-input" type="checkbox" id="filledSwitch" onChange="ToggleFilled();">
						<label class="form-check-label" for="filledSwitch">Filled</label>
					</div> -->
					<!-- <div class="form-check form-switch">
						<input class="form-check-input" type="checkbox" id="invertedSwitch" onChange="ToggleInverted();" checked>
						<label class="form-check-label" for="invertedSwitch">Inverted</label>
					</div> -->
				</div>
			<script>
			var colours = ['rgb(16, 112, 16)','rgb(255, 176, 53)','rgb(144, 144, 144)','rgb(32, 32, 32)','rgb(155, 15, 15)','rgb(39, 49, 185)','rgb(208, 16, 176)','rgb(32, 208, 208)','rgb(240, 232, 16)','rgb(112, 0, 116)','rgb(224, 224, 224)','rgb(32, 32, 255)','rgb(0, 160, 0)','rgb(64, 0, 0)','rgb(16, 0, 64)','rgb(64, 96, 0)'];
			var chart;
			var dany = {};
			var dfields =  ['kills', 'power', 'score', 'droid', 'droidloss', 'droidlost', 'droidbuilt', 'struct', 'structbuilt', 'structlost', 'rescount', 'kd'];
			var dfieldsT = ['Kills', 'Power', 'Score', 'Units', 'Unit loss', 'Units lost', 'Units built', 'Structures', 'Structures built', 'Structures lost', 'Research count', 'Kill/Death ratio'];
			var chartDatasetName = dfields[0];
			var dtempl = [
{{range $k, $player := .Players}}{{if eq $player.Hash ""}}{{else}}{{if ne $player.Usertype "spectator"}}				{pointHitRadius: 20, label: '{{$player.Name}}', usertype: '{{$player.Usertype}}', data: [], borderColor: colours[{{$player.Colour}}], fill: document.getElementById("stackedSwitch").checked, backgroundColor: colours[{{$player.Colour}}]},
{{end}}{{end}}{{end}}			];
			function ChartUpdateStyle() {
				if (chartDatasetName == 'kd' || chartDatasetName == 'rescount'){
					chart.options.scales.y.stacked = false;
					document.getElementById("stackedSwitch").checked = false;
					chart.config.data.datasets.forEach((item, i) => {
						item.fill = false;
					});
					// document.getElementById("filledSwitch").checked = false;
				} else {
					chart.options.scales.y.stacked = document.getElementById("stackedSwitch").checked;
					chart.config.data.datasets.forEach((item, i) => {
						item.fill = document.getElementById("stackedSwitch").checked
					});
				}
				// chart.config.data.datasets.forEach((item, i) => {
				// 	item.data.forEach((d, ii) => {
				// 		if(item.usertype = 'looser') {
				// 			if(item.inverted) {
				// 				if(!document.getElementById("invertedSwitch").checked) {
				// 					d = d * -1;
				// 					item.inverted = false;
				// 				}
				// 			} else {
				// 				if(document.getElementById("invertedSwitch").checked) {
				// 					d = d * -1;
				// 					item.inverted = true;
				// 				}
				// 			}
				// 		}
				// 	});
				// });
				chart.update();
			}
			function ToggleStacked() {
				ChartUpdateStyle();
			}
			function ToggleFilled() {
				ChartUpdateStyle();
			}
			function ToggleInverted() {
				ChartUpdateStyle();
			}
			function ChangeToName(name) {
				chart.config.data.datasets = dany[name];
				chartDatasetName = name;
				chart.config.options.scales.y.title.text = dfieldsT[dfields.indexOf(name)];
				ChartUpdateStyle();
			}
			window.onload = function () {
				dfields.forEach((item, i) => {
					let b = document.createElement("button")
					b.classList.add("btn");
					b.classList.add("btn-primary");
					b.classList.add("mr-1");
					b.onclick = function() {ChangeToName(item)};
					b.innerHTML = dfieldsT[i];
					document.getElementById('Switchbuttons').append(b);
				});
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if (xhr.readyState === 4 && xhr.status === 200) {
						const resp = JSON.parse(xhr.response).sort((f, s) => { return f.gametime - s.gametime });
						var ctx = document.getElementById('Kills').getContext('2d');
						var l = [];
						dfields.forEach((v) => {
							dany[v] = JSON.parse(JSON.stringify(dtempl));
						});
						resp.forEach((tick, i) => {
							let minutes = Math.floor(tick.gametime / 60000);
							let seconds = ((tick.gametime % 60000) / 1000).toFixed(0);
							l.push(minutes + ":" + (seconds < 10 ? '0' : '') + seconds);
							for (let variable in tick) {
								if (Array.isArray(tick[variable])) {
									tick[variable].splice(dtempl.length);
								}
							}
							dfields.forEach((v) => {
								for(let pln = 0; pln < dtempl.length; pln++) {
									let invers;
									if (dany[v][pln].usertype == 'loser'){
										invers = -1;
										dany[v][pln].inverted = true;
									} else {
										invers = 1;
										dany[v][pln].inverted = false;
									}
									if(v == 'kd') {
										let del = (tick.droidlost[pln]+tick.droidloss[pln]+tick.structlost[pln]);
										dany[v][pln].data.push(invers*(tick.kills[pln]+5)/(del+5));
									} else {
										dany[v][pln].data.push(invers*tick[v][pln]);
									}
								}
							});
						});
						chart = new Chart(ctx, {
						    type: 'line',
							parsing: false,
							normalized: true,
						    data: {
						        labels: l,
						        datasets: dany[dfields[0]]
							},
						    options: {
								spanGaps: true,
								showLine: true,
								animation: {
									duration: 0
								},
								responsive: true,
								maintainAspectRatio: false,
								plugins: {
									legend: {
										position: 'top',
									},
									title: {
										display: true,
										text: 'Game {{.ID}}',
										position: 'top'
									},
									zoom: {
										pan: {
											enabled: true,
											mode: 'x',
										},
										zoom: {
											wheel: {
												enabled: true,
											},
											pinch: {
												enabled: true,
											},
											mode: 'x',
										}
									}
								},
								radius: 0,
								scales: {
									x: {
										title: {
											display: true,
											text: 'time'
										}
									},
									y : {
										stacked: document.getElementById("stackedSwitch").checked,
										title: {
											display: true,
											text: 'Value'
										}
									}
								}
							}
						});
					}
				}
				xhr.open('GET', 'https://tacticalpepe.me/api/graph/{{.ID}}', true);
				xhr.send(null);
			}
			</script>
			<div class="container" style="height:500px;">
			<canvas id="Kills"></canvas>
			</div>
			<div class="container" id="Researchlog">
				<script>
				let formatter = new Intl.DateTimeFormat("ru", {
				  hour: "numeric",
				  minute: "numeric",
				  second: "numeric",
					timeZone: "UTC"
				});
						var Researchlog = JSON.parse({{.Researchlog}});
						var body = document.getElementById("Researchlog");
						Researchlog = Researchlog.filter((resObj) => {return (resObj.time > 100)})
						let firstOpen = {};
						Researchlog.forEach(resObj => {
							if (!firstOpen[resObj.name] || firstOpen[resObj.name].time < resObj.time){
								firstOpen[resObj.name] = resObj.time;
							}
						});
						const printTable = Researchlog.map(resObj => {
							let row = Array(10).fill("");
							row[0] = formatter.format(new Date(resObj.time));
							row[resObj.player] = resObj.name +"\n" +formatter.format(new Date( resObj.time - firstOpen[resObj.name] ));
							return row;
						});
						// creates a <table> element and a <tbody> element
						var tbl = document.createElement("table");
						var tblBody = document.createElement("tbody");

						// creating all cells
						printTable.forEach((resObj) => {
							// creates a table row
							var row = document.createElement("tr");

							for (var i = 0; i < resObj.length; i++) {
								// Create a <td> element and a text node, make the text
								// node the contents of the <td>, and put the <td> at
								// the end of the table row
								var cell = document.createElement("td");
								var cellText = document.createTextNode(resObj[i]);
								cell.appendChild(cellText);
								row.appendChild(cell);
							}

							// add the row to the end of the table body
							tblBody.appendChild(row);
						});

						// put the <tbody> in the <table>
						tbl.appendChild(tblBody);
						// appends <table> into <body>
						body.appendChild(tbl);
						// sets the border attribute of tbl to 2;

				</script>
			</div>
			</div>
			{{end}}
		</div>
	</body>
	<!-- Cloudflare Web Analytics --><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"token": "7ec885fe35c644aca7c6ae861471372a"}'></script><!-- End Cloudflare Web Analytics -->
</html>
{{end}}
