{{define "games2"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Latest hosted games" property="og:title">
		<meta content="Multihoster powered game autohosting solution" property="og:description">
		<meta content="https://wz2100-autohost.net/games" property="og:url">
		<title>Autohoster recent games list</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" integrity="sha512-ZnR2wlLbSbr8/c9AgLg3jQPAattCUImNsae6NHYnS9KrIwRdcY9DxFotXhNAKIKbAXlRnujIqUWoXXwqyFOeIQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
		<link href="/static/bootstrap-table/bootstrap-table.min.css" rel="stylesheet">
		<link href="/static/bootstrap-table/extensions/sticky-header/bootstrap-table-sticky-header.css" rel="stylesheet">
		<link href="/static/bootstrap-table/extensions/filter-control/bootstrap-table-filter-control.css" rel="stylesheet">
	</head>
	<body>
		{{template "NavPanel" . }}
		<script src="/static/bootstrap-table/bootstrap-table.min.js"></script>
		<script src="/static/bootstrap-table/extensions/filter-control/bootstrap-table-filter-control.min.js"></script>
		<script src="/static/bootstrap-table/extensions/export/bootstrap-table-export.min.js"></script>
		<script src="/static/bootstrap-table/extensions/sticky-header/bootstrap-table-sticky-header.min.js"></script>
		<script src="/static/bootstrap-table/tablehelpers.js"></script>
		<div class="px-4 py container">
			<div id="table-toolbar">
				<h4>Autohoster games</h4>
			</div>
			<noscript>
				Enable javascript to view table contents
				<style> yes-script { display:none; } </style>
			</noscript>
			<yes-script>
			<table id="table" class="smart-table"
			data-total-not-filtered="{.Total}"
			data-url="/api/games"
			data-filter-control="true"
			data-sort-name="TimeStarted"
			data-sort-order="desc"
			data-show-refresh="true"
			data-toolbar="#table-toolbar"
			data-cache="false"
			{{/* data-toggle="table" */}}
			data-id-field="ID"
			data-pagination="true"
			data-page-size="50"
			data-page-number="1"
			data-pagination-loop="false"
			data-show-extended-pagination="true"
			data-page-list="[10, 15, 25, 35, 50, 100]"
			data-buttons-prefix="btn btn-sm btn-primary"
			data-classes="table table-striped table-sm"
			data-search="true"
			data-search-on-enter-key="true"
			data-show-search-button="true"
			data-side-pagination="server"
			data-silent-sort="false"
			{{/* data-search-highlight="true" */}}
			data-show-export="true"
			data-show-search-clear-button="true"
			data-escape="true"
			data-show-filter-control-switch="true"
			data-filter-control-visible="false"
			{{/* data-show-footer="true" */}}
			data-sticky-header="true">
				<thead>
					<tr>
						<th data-rowspan="2" data-halign="center" data-formatter="IDFormatter" data-field="ID">ID</th>
						<th data-rowspan="2" data-halign="center" data-formatter="TimeFormatter" data-field="TimeStarted">Time</th>
						<th data-rowspan="2" data-halign="center" data-formatter="mapNameFormatter" data-field="MapName" data-filter-control="select" data-filter-data="var:MapsSelection">Map</th>
						<th data-colspan="3" data-halign="center" data-class="noBottomBorder">Settings</th>
						<th data-colspan="2" data-halign="center" data-class="noBottomBorder" data-formatter="playersFormatter" data-class="width45" data-filter-control="input">Players</th>
						<th data-rowspan="2" data-halign="center" data-formatter="detailsBtn"></th>
					</tr>
					<tr>
						<th data-class="hiddenrow" data-field="BaseLevel" data-formatter="BaseLevelSettingsFormatter"></th>
						<th data-class="hiddenrow" data-field="Scavengers" data-formatter="ScavengersSettingsFormatter"></th>
						<th data-class="hiddenrow" data-field="Alliances" data-formatter="AlliancesSettingsFormatter"></th>
						<th data-class="hiddenrow" data-formatter="playersFormatterA"></th>
						<th data-class="hiddenrow" data-formatter="playersFormatterB"></th>
					</tr>
				</thead>
			</table>
			</yes-script>
		</div>
		<script>
		var MapsSelection = { {{range $k, $v := .Maps}}
			"{{$v}}": "{{$v}}",{{end}}
		};
		$(function() {
			$('#table').bootstrapTable({
				onPageChange: function (number, size) {
					window.scrollTo({
						top: 0, left: 0,
						behavior: 'smooth'
					});
				},
				formatSearch: function () {
					return 'Search participants';
				}
			});
		})
		</script>
	</body>
</html>
{{end}}
{{define "gamedetails2"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Autohosted game {{.Game.ID}}" property="og:title">
		<meta content="Map: {{.Game.MapName}} At: {{.Game.TimeStarted}} Game time: {{GameTimeToStringI .Game.GameTime}}" property="og:description">
		<meta content="https://wz2100-autohost.net/games/{{.Game.ID}}" property="og:url">
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
		<script src="https://github.com/chartjs/chartjs-plugin-zoom/releases/download/v1.1.1/chartjs-plugin-zoom.min.js"></script>
		<title>Autohoster game {{.Game.ID}}</title>
	</head>
	<body>
		{{template "NavPanel" . }}
		<div class="px-4 py-5 my-5 container">
			<!-- <pre>{{.}}</pre> -->
			{{with .Game}}
			<div class="row">
				<div class="col-sm">
					<h3>Game {{.ID}}</h4>
					<p>Map: {{.MapName}} ({{.MapHash}})</p>
					<p>When: {{.TimeStarted}} <=> {{.TimeEnded}} GMT</p>
					<p>Game time: {{GameTimeToStringI .GameTime}}</p>
					<p>Settings:
						<img class="icons icons-base{{.BaseLevel}}">
						<img class="icons icons-alliance{{allianceToClassI .Alliances}}">
						<img class="icons icons-scav{{boolto10 .Scavengers}}">
						Game version: {{.GameVersion}}
					</p>
					{{if .DebugTriggered}}
					<p>
						<h5 class="rainbow">Debug enabled</h5>
					</p>
					{{end}}
					{{if .ReplayFound}}
					<p>
						<a class="btn btn-primary" href="/api/replay/{{.ID}}">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-circle" viewBox="0 0 16 16">
								<path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z"/>
							</svg>
							Replay
						</a>
					</p>
					{{else}}
					<p>No replay avaliable</p>
					{{end}}
				</div>
				<div class="col-sm">
					<img src="https://wz2100.euphobos.ru/maps/preview/{{.MapHash}}.png">
				</div>
			</div>
			{{if $.IsSuperadmin}}
			<p style="border-left: 3px solid red;padding-left: 1rem;">
				Game directory: <code>{{.Gamedir}}</code><br>
				Archive: <code>{{GameDirToWeek .Gamedir}}</code>
			</p>
			{{end}}
			<div class="container"><p>
				{{$first_specs_printed := "false"}}
				{{range $k, $player := .Players}}
					{{if eq $player.Usertype "spectator"}}
						{{if eq $first_specs_printed "false"}}
						{{$first_specs_printed = "true"}}
						Spectators:
						{{end}}
						{{$k}} : {{$player}}
					{{end}}
				{{end}}
			</p></div>
			<div class="container">
				<table class="table text-nowrap">
					<thead>
						<tr class="text-center">
							<th></th>
							<th></th>
							<th></th>
							<th></th>
							<th colspan="2">Droids</th>
							<th colspan="2">Structures</th>
							<th></th>
							<th></th>
							<th></th>
						</tr><tr>
							<th>Players</th>
							<th>Position</th>
							<th>Rating transfer</th>
							<th>Kills</th>
							<th>Lost</th>
							<th>Built</th>
							<th>Lost</th>
							<th>Built</th>
							<th>Power</th>
							<th title="Power Won Lost - PowerWon/PowerLost">PWL</th>
							<th title="Lab existing ticks / lab active ticks">Lab activity</th>
						</tr>
					</thead>
					<tbody>
						<tr><td>Winners</td></tr>
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "winner"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
								{{template "wzprofile" $player}}
							</td>
							<td>{{$player.Position}}</td>
							<td>{{$player.RatingDiff}}</td>
							<td>{{$player.Kills}}</td>
							<td>{{$player.DroidLost}}</td>
							<td>{{$player.DroidBuilt}}</td>
							<td>{{$player.StructLost}}</td>
							<td>{{$player.StructBuilt}}</td>
							<td>{{$player.Power}}</td>
							<td title="Power won: {{$player.PowerWon}} Power lost: {{$player.PowerLost}}">{{f64tostring (divtf64 $player.PowerWon $player.PowerLost)}}</td>
							<td>{{f64tostring (multf64 100 (divtf64 $player.LabPerformance $player.LabPotential))}}</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}

						<tr><td>Losers</td></tr>
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "loser"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
								{{template "wzprofile" $player}}
							</td>
							<td>{{$player.Position}}</td>
							<td>{{$player.RatingDiff}}</td>
							<td>{{$player.Kills}}</td>
							<td>{{$player.DroidLost}}</td>
							<td>{{$player.DroidBuilt}}</td>
							<td>{{$player.StructLost}}</td>
							<td>{{$player.StructBuilt}}</td>
							<td>{{$player.Power}}</td>
							<td title="Power won: {{$player.PowerWon}} Power lost: {{$player.PowerLost}}">{{f64tostring (divtf64 $player.PowerWon $player.PowerLost)}}</td>
							<td>{{f64tostring (multf64 100 (divtf64 $player.LabPerformance $player.LabPotential))}}</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}
						
						{{$fighterLabelRowPrinted := false}}
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "fighter"}}
						{{if $fighterLabelRowPrinted}}{{else}}<tr><td>Fighters</td></tr>{{$fighterLabelRowPrinted = true}}{{end}}
						{{end}}
						{{end}}
						{{end}}
						{{range $k, $player := .Players}}
						{{if eq $player.Hash ""}}{{else}}
						{{if eq $player.Usertype "fighter"}}
						<tr class="wz-color-background-{{$player.Colour}}">
							<td title="Hash: {{$player.Hash}}">
								{{template "wzprofile" $player}}
							</td>
							<td>{{$player.Position}} - {{$player.Team}}</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
							<td>---</td>
						</tr>
						{{end}}
						{{end}}
						{{end}}
					</tbody>
				</table>
			</div>
			{{/*
			<div class="container">
				<table class="table">
					<thead>
						<tr>
							<th>Research</th>
							{{range $k, $player := .JMap.playerData}}
							{{if ne $k 0}}
							<th>{{$player.name}} ({{$player.playnum}})({{$k}})({{$player.position}})</th>
							{{end}}
							{{end}}
						</tr>
					</thead>
					<tbody>
						{{range $n, $p := .ResSorted}}
						<tr>
							<td>{{$n}}</td>
							{{range $nn, $rr := $p}}
							{{if ne $nn 0}}
							<td>{{$rr}}</td>
							{{end}}
							{{end}}
						</tr>
						{{end}}
					</tbody>
							<th>time</th>
						{{range $k, $player := .JMap.playerData}}
							<th class="wz-color-background-{{$player.colour}}">
							{{$player.name}}
							</th>
						{{end}}
						</tr>
					</thead>
					<tbtbody>
					{{range $r, $research := (index .Game.Map.extendedPlayerData 1).researchComplite}}
						<th>{{$r}}</th>
						<th>{{$research}}</th>
					{{end}}
					</tbtbody>
				</table>
			</div>*/}}
			<div class="container">
				<div id="LoadGraphBtn" class="btn btn-primary" onclick="LoadGraph();document.getElementById(`LoadGraphBtn`).style.display = `none`;">Load graph</div>
				<div id="LoadingGraphText" style="display:none">Loading graph, please wait...</div>
				<div class="btn-group" role="group" id="Switchbuttons">
				</div>
				<div id="GraphTogglesDiv" style="display: none" class="form-inline">
					<div class="form-check form-switch form-check-inline">
						<input class="form-check-input" type="checkbox" id="stackedSwitch" onChange="ToggleStacked();">
						<label class="form-check-label" for="stackedSwitch">Stacked</label>
					</div>
					<!-- <div class="form-check form-switch form-check-inline">
						<input class="form-check-input" type="checkbox" id="filledSwitch" onChange="ToggleFilled();">
						<label class="form-check-label" for="filledSwitch">Filled</label>
					</div> -->
					<div class="form-check form-switch form-check-inline">
						<input class="form-check-input" type="checkbox" id="invertedSwitch" onChange="ToggleInverted();" checked>
						<label class="form-check-label" for="invertedSwitch">Inverted</label>
					</div>
				</div>
			</div>
			<script>
			var colours = ['rgb(16, 112, 16)','rgb(255, 176, 53)','rgb(144, 144, 144)','rgb(32, 32, 32)','rgb(155, 15, 15)','rgb(39, 49, 185)','rgb(208, 16, 176)','rgb(32, 208, 208)','rgb(240, 232, 16)','rgb(112, 0, 116)','rgb(224, 224, 224)','rgb(32, 32, 255)','rgb(0, 160, 0)','rgb(64, 0, 0)','rgb(16, 0, 64)','rgb(64, 96, 0)'];
			var chart;
			var dany = {};
			var dfields =  ['kills', 'power', 'score', 'droid', 'droidlost', 'droidbuilt', 'droidhp', 'struct', 'structbuilt', 'structlost', 'structkilled', 'summexp', 'oilrigs', 'rescount', 'kd', 'powerlost', 'powerwon', 'pwl', 'labActivity'];
			var dfieldsT = ['Kills', 'Power', 'Score', 'Units', 'Units lost', 'Units built', 'Units hp', 'Structures', 'Structures built', 'Structures lost', 'Structures destroyed', 'Exp summ', 'Oil rigs captured', 'Research count', 'Kill/Death ratio', 'Power lost', 'Power won', 'Power won/lost' , 'Lab activity'];
			var chartDatasetName = dfields[0];
			var dtempl = [{{range $k, $player := .Players}}{{if eq $player.Hash ""}}{{else}}{{if ne $player.Usertype "spectator"}}
				{pointHitRadius: 20, label: '{{$player.Name}}', gamePosition: '{{$player.Position}}', usertype: '{{$player.Usertype}}', data: [], borderColor: colours[{{$player.Colour}}], fill: document.getElementById("stackedSwitch").checked, backgroundColor: colours[{{$player.Colour}}]},
{{end}}{{end}}{{end}}			];
			function PlotClassData(JsonData) {
				const resp = JSON.parse(JsonData);
				let ctx = document.getElementById('ClassificationGraphCanvas').getContext('2d');
				let md = JSON.parse(JSON.stringify(dtempl));
				let l = [];
				Object.keys(resp).forEach((i) => {
					Object.keys(resp[i]).forEach((j) => {
						if(!l.includes(j)) {
							l.push(j)
						}
					});
				});
				for(let i = 0; i < md.length; i++) {
					let nn = [];
					l.forEach((k) => {
						let nv = 0;
						if(Object.keys(resp[md[i].gamePosition]).includes(k)) {
							nv = resp[md[i].gamePosition][k];
						}
						nn.push(nv)
					});
					md[i].data = nn;
				}
				console.log(md);
				console.log(l);
				chart2 = new Chart(ctx, {
					type: 'radar', parsing: false, normalized: true,
					data: {labels: l, datasets: md},
					options: {spanGaps: true, showLine: true,
						animation: {duration: 20}, responsive: true, maintainAspectRatio: false,
						plugins: {
							legend: {position: 'top'},
							title: {display: true, text: 'Game {{.ID}}', position: 'top'},
							subtitle: {display: true, text: 'Research classification'},
							zoom: {
								pan: {enabled: true, mode: 'x'},
								zoom: {
									wheel: {enabled: true},
									pinch: {enabled: true},
									mode: 'x',
								}
							}
						}, radius: 3,
						scales: {r: {
							min: 0
						}}
					}
				});
			}
			function LoadClassificationGraph() {
				document.getElementById(`ClassificationGraphContainingDiv`).style.display = `block`;
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if (xhr.readyState === 4 && xhr.status === 200) {
						PlotClassData(xhr.response);
					}
				}
				xhr.open('GET', window.location.origin+'/api/classify/game/{{.ID}}', true);
				xhr.send(null);
			}
			function ChartUpdateStyle() {
				if (chartDatasetName == 'kd' || chartDatasetName == 'rescount'){
					chart.options.scales.y.stacked = false;
					document.getElementById("stackedSwitch").checked = false;
					chart.config.data.datasets.forEach((item, i) => {
						item.fill = false;
					});
					// document.getElementById("filledSwitch").checked = false;
				} else {
					chart.options.scales.y.stacked = document.getElementById("stackedSwitch").checked;
					chart.config.data.datasets.forEach((item, i) => {
						item.fill = document.getElementById("stackedSwitch").checked
					});
				}
				chart.config.data.datasets.forEach((item, i) => {
					if(chart.config.data.datasets[i].usertype === 'loser') {
						let shouldInvert = false;
						if(chart.config.data.datasets[i].inverted) {
							if(!document.getElementById("invertedSwitch").checked) {
								shouldInvert = true;
							}
						} else {
							if(document.getElementById("invertedSwitch").checked) {
								shouldInvert = true;
							}
						}
						if(shouldInvert) {
							chart.config.data.datasets[i].data.forEach((d, ii) => {
								chart.config.data.datasets[i].data[ii] = d * -1;
							});
							if(chart.config.data.datasets[i].inverted) {
								chart.config.data.datasets[i].inverted = false;
							} else {
								chart.config.data.datasets[i].inverted = true;
							}
						}
					}
				});
				chart.update();
			}
			function ToggleStacked() {
				ChartUpdateStyle();
			}
			function ToggleFilled() {
				ChartUpdateStyle();
			}
			function ToggleInverted() {
				ChartUpdateStyle();
			}
			function ChangeToName(name) {
				chart.config.data.datasets = dany[name];
				chartDatasetName = name;
				chart.config.options.scales.y.title.text = dfieldsT[dfields.indexOf(name)];
				ChartUpdateStyle();
			}
			function PlotData(JsonData) {
				const resp = JSON.parse(JsonData).sort((f, s) => { return f.gametime - s.gametime });
				let ctx = document.getElementById('GraphCanvas').getContext('2d');
				let l = [];
				dfields.forEach((v) => {
					dany[v] = JSON.parse(JSON.stringify(dtempl));
				});
				resp.forEach((tick, i) => {
					let minutes = Math.floor(tick.gametime / 60000);
					let seconds = ((tick.gametime % 60000) / 1000).toFixed(0);
					l.push(minutes + ":" + (seconds < 10 ? '0' : '') + seconds);
					for (let variable in tick) {
						if (Array.isArray(tick[variable])) {
							tick[variable].splice(dtempl.length);
						}
					}
					dfields.forEach((v) => {
						for(let pln = 0; pln < dtempl.length; pln++) {
							let invers;
							if (dany[v][pln].usertype == 'loser'){
								invers = -1;
								dany[v][pln].inverted = true;
							} else {
								invers = 1;
								dany[v][pln].inverted = false;
							}
							if(v == 'kd') {
								dany[v][pln].data.push(invers*(tick.kills[pln]+5)/(tick.droidlost[pln]+5));
							} else if(v == 'labActivity') {
								dany[v][pln].data.push(100*invers*((tick.labperformance[pln]+5)/(tick.labpotential[pln]+5)));
							} else if(v == 'pwl') {
								dany[v][pln].data.push(invers*((tick.powerwon[pln]+5)/(tick.powerlost[pln]+5)));
							} else {
								dany[v][pln].data.push(invers*tick[v][pln]);
							}
						}
					});
				});
				chart = new Chart(ctx, {
					type: 'line', parsing: false, normalized: true,
					data: {labels: l, datasets: dany[dfields[0]]},
					options: {spanGaps: true, showLine: true,
						animation: {duration: 0}, responsive: true, maintainAspectRatio: false,
						plugins: {
							legend: {position: 'top'},
							title: {display: true, text: 'Game {{.ID}}', position: 'top'},
							zoom: {
								pan: {enabled: true, mode: 'x'},
								zoom: {
									wheel: {enabled: true},
									pinch: {enabled: true},
									mode: 'x',
								}
							}
						}, radius: 0,
						scales: {
							x: {title: {display: true, text: 'time'}},
							y : {stacked: document.getElementById("stackedSwitch").checked,
								title: {display: true, text: 'Value'}
							}
						}
					}
				});
			}
			function LoadGraph() {
				let sel = document.createElement("select")
				sel.classList.add("select")
				dfields.forEach((item, i) => {
					let b = document.createElement("option")
					b.classList.add("option");
					b.innerHTML = dfieldsT[i];
					b.value = item;
					sel.append(b);
				});
				sel.addEventListener('change', (event) => {
					ChangeToName(event.target.value)
				});
				document.getElementById('Switchbuttons').append(sel);
				document.getElementById(`GraphTogglesDiv`).style.display = `block`;
				document.getElementById(`GraphContainingDiv`).style.display = `block`;
				document.getElementById(`LoadingGraphText`).style.display = `block`;
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if(xhr.readyState === 4) {
						if (xhr.status === 200) {
							document.getElementById(`LoadingGraphText`).innerHTML = "Rendering graph...";
							PlotData(xhr.response);
							document.getElementById(`LoadingGraphText`).style.display = `none`;
						} else if(xhr.status === 204) {
							document.getElementById(`LoadingGraphText`).innerHTML = "Graphs that are older than 1 month are not stored";
						} else {
							document.getElementById(`LoadingGraphText`).innerHTML = "Error occured while trying to get graphs, please let administrators know";
						}
					}
				}
				xhr.addEventListener('loadstart', function(e) {
					document.getElementById(`LoadingGraphText`).innerHTML = "Loading graph, please wait... (connected, waiting for data...)";
				});
				xhr.addEventListener('progress', function(e) {
					document.getElementById(`LoadingGraphText`).innerHTML = "Loading graph, please wait... (loaded "+e.loaded+" bytes)";
				});
				xhr.addEventListener('error', function(e) {
					document.getElementById(`LoadingGraphText`).innerHTML = "Error occured while fetching graph from the server";
				});
				// fuck you cors
				xhr.open('GET', window.location.origin+'/api/graph/{{.ID}}', true);
				xhr.send(null);
				document.getElementById(`LoadingGraphText`).innerHTML = "Loading graph, please wait... (connecting...)";
			}
			window.onload = function () {
				dtempl.sort((f, s) => { return f.gamePosition - s.gamePosition });
			}
			</script>
			<div class="container graphContainer" id="GraphContainingDiv" style="height:500px;display:none">
			<canvas id="GraphCanvas"></canvas>
			</div>
			<div class="container">
				<button class="btn btn-primary" id="LoadClassGraphBtn" onclick="document.getElementById(`LoadClassGraphBtn`).style.display = `none`;LoadClassificationGraph();">Load research classification</button>
				<div class="container graphContainer" id="ClassificationGraphContainingDiv" style="height:500px;width:500px;display:none">
				<canvas id="ClassificationGraphCanvas"></canvas>
				</div>
			</div>
			<div class="container" id="Researchlog">
				{{if le .ID 1032}}
				<div>Research log players are not matching players that made research!</div>
				{{end}}
				<div id="LoadReslogBtn" class="btn btn-primary" onclick="LoadResearchLog(); document.getElementById(`LoadReslogBtn`).style.display = `none`;">Load research log</div>
				<div id="LoadingReslogText" style="display:none">Research log is loading, please wait...</div>
			<script>
			function AssembleResearchLog2(JsonData) {
				let formatter = new Intl.DateTimeFormat("ru", {
					hour: "numeric",
					minute: "numeric",
					second: "numeric",
					timeZone: "UTC"
				});
				let ResearchLog = JSON.parse(JsonData).filter((resObj) => {return (resObj.time > 100)});
				// ResearchLog.forEach(r => {r.player -= 1});
				let Table = document.createElement("table");
				Table.classList.add("table");
				document.getElementById("Researchlog").appendChild(Table);
				
				let Theader = document.createElement("thead");
				Table.appendChild(Theader);
				let HeaderRow = document.createElement("tr");
				Theader.appendChild(HeaderRow);
				let HeaderCellTime = document.createElement("td");
				HeaderCellTime.appendChild(document.createTextNode("Time researched"))
				HeaderRow.appendChild(HeaderCellTime);
				dtempl.forEach(t => {
					let HeaderCellPlayer = document.createElement("td");
					HeaderCellPlayer.appendChild(document.createTextNode(t.label))
					HeaderRow.appendChild(HeaderCellPlayer);
				});
				// let HeaderCellDifference = document.createElement("td");
				// HeaderCellDifference.appendChild(document.createTextNode("Time difference"))
				// HeaderRow.appendChild(HeaderCellDifference);
				
				let PrimeOpen = {};
				ResearchLog.forEach(Research => {
					if (!PrimeOpen[Research.name] || (PrimeOpen[Research.name].time < Research.time && Research.time - PrimeOpen[Research.name].time > 20)) {
						PrimeOpen[Research.name] = Research.time;
					}
				});
				
				let Tbody = document.createElement("tbody");
				Table.appendChild(Tbody);
				ResearchLog.forEach(Research => {
					let ResRow = document.createElement("tr");
					Tbody.appendChild(ResRow);
					
					let HeaderCellTime = document.createElement("td");
					HeaderCellTime.appendChild(document.createTextNode(formatter.format(new Date(Research.time))))
					ResRow.appendChild(HeaderCellTime);
					
					for(let Pad=0; Pad<Research.position; Pad++) {
						ResRow.appendChild(document.createElement("td"));
					}
					
					let HeaderCellName = document.createElement("td");
					HeaderCellName.appendChild(document.createTextNode(Research.name))
					HeaderCellName.appendChild(document.createElement("br"));
					if(PrimeOpen[Research.name] < Research.time) {
						let LateText = document.createElement("text");
						LateText.style.color="red";
						LateText.innerHTML = formatter.format(new Date(Research.time-PrimeOpen[Research.name]));
						HeaderCellName.appendChild(LateText)
					}
					ResRow.appendChild(HeaderCellName);
					
					for(let Pad=Research.position; Pad<dtempl.length; Pad++) {
						ResRow.appendChild(document.createElement("td"));
					}
				});
			}
			// function AssembleResearchLog(JsonData) {
			// 	let formatter = new Intl.DateTimeFormat("ru", {
			// 		hour: "numeric",
			// 		minute: "numeric",
			// 		second: "numeric",
			// 		timeZone: "UTC"
			// 	});
			// 	var Researchlog = JSON.parse(JsonData).filter((resObj) => {return (resObj.time > 100)});
			// 	var body = document.getElementById("Researchlog");
			// 	Researchlog = Researchlog.filter((resObj) => {return (resObj.time > 100)})
			// 	let firstOpen = {};
			// 	Researchlog.forEach(resObj => {
			// 		if (!firstOpen[resObj.name] || firstOpen[resObj.name].time < resObj.time){
			// 			firstOpen[resObj.name] = resObj.time;
			// 		}
			// 	});
			// 	const printTable = Researchlog.map(resObj => {
			// 		let row = Array(10).fill("");
			// 		row[0] = formatter.format(new Date(resObj.time));
			// 		row[resObj.player] = resObj.name +"\n" +formatter.format(new Date( resObj.time - firstOpen[resObj.name] ));
			// 		return row;
			// 	});
			// 	// creates a <table> element and a <tbody> element
			// 	var tbl = document.createElement("table");
			// 	var tblBody = document.createElement("tbody");
			// 
			// 	// creating all cells
			// 	printTable.forEach((resObj) => {
			// 		// creates a table row
			// 		var row = document.createElement("tr");
			// 
			// 		for (var i = 0; i < resObj.length; i++) {
			// 			// Create a <td> element and a text node, make the text
			// 			// node the contents of the <td>, and put the <td> at
			// 			// the end of the table row
			// 			var cell = document.createElement("td");
			// 			var cellText = document.createTextNode(resObj[i]);
			// 			cell.appendChild(cellText);
			// 			row.appendChild(cell);
			// 		}
			// 
			// 		// add the row to the end of the table body
			// 		tblBody.appendChild(row);
			// 	});
			// 
			// 	// put the <tbody> in the <table>
			// 	tbl.appendChild(tblBody);
			// 	// appends <table> into <body>
			// 	body.appendChild(tbl);
			// 	// sets the border attribute of tbl to 2;
			// }
			function LoadResearchLog() {
				document.getElementById(`LoadingReslogText`).style.display = `block`;
				var xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if (xhr.readyState === 4 && xhr.status === 200) {
						AssembleResearchLog2(xhr.response);
						document.getElementById(`LoadingReslogText`).style.display = `none`;
					}
				}
				// more fuck you cors
				xhr.open('GET', window.location.origin+'/api/reslog/{{.ID}}', true);
				xhr.send(null);
			}
			</script>
			</div>
			</div>
			{{end}}
		</div>
	</body>
	<!-- Cloudflare Web Analytics --><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"token": "7ec885fe35c644aca7c6ae861471372a"}'></script><!-- End Cloudflare Web Analytics -->
</html>
{{end}}
