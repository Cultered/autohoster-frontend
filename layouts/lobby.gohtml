{{define "lobby"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Warzone 2100 lobby" property="og:title">
		<meta content="List of games, mostly good quality but some are just unplayable" property="og:description">
		<meta content="https://wz2100-autohost.net/lobby" property="og:url">
		<title>Warzone 2100 lobby</title>
		<style>
		.blob {
			background: grey;
			display: inline-block;
			box-shadow: 0 0 0 0 rgba(255, 0, 0, 1);
			transform: scale(1);
			cursor: pointer;
			border-radius: 1rem;
			padding: 0.25em 0.65em;
			color: white;
		}
		.blob-animate {
			animation: pulse 0.5s ease-in-out;
		}
		@keyframes pulse {
			0% {
				{{/* transform: scale(0.95); */}}
				box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.7);
			}
			70% {
				{{/* transform: scale(1); */}}
				box-shadow: 0 0 0 10px rgba(255, 0, 0, 0);
			}
			100% {
				{{/* transform: scale(0.95); */}}
				box-shadow: 0 0 0 0 rgba(255, 0, 0, 0);
			}
		}
		@keyframes idle { 100% {} }
		</style>
	</head>
	<body>
		{{template "NavPanel" . }}
		<div class="px-4 my-5 text-center">
			<div class="container">
				<h3 style="display: inline">Warzone 2100 Lobby
				<sup>
				<div class="blob badge" id="LiveBlob" data-bs-toggle="tooltip" data-bs-placement="right" title="{{if .UserAuthorized}}Click to toggle live refresh of lobby (number shows how many people are watching){{else}}Log in to receive live lobby updates{{end}}">&nbsp</div>
				</sup>
				</h3>
				<table class="table" id="LobbyTable">
					<tr>
						<th>GID</th>
						<th>Players</th>
						<th>Game name</th>
						<th>Map name</th>
						<th>Host name</th>
						<th>Version</th>
						<th>Extra</th>
					</tr>
				{{range $k, $el := .Lobby.Rooms}}
					<tr>
						<td>{{$el.GameID}}</td>
						<td>{{$el.CurrentPlayers}}/{{$el.MaxPlayers}}</td>
						<td>{{$el.GameName}}</td>
						<td>{{$el.MapName}}</td>
						<td>{{$el.HostName}}</td>
						<td>{{$el.Version}}</td>
						<td>{{if $el.Pure}}Map-mod {{end}}{{if $el.Private}}Private{{end}}</td>
					</tr>
				{{else}}
					<tr><td colspan="99">No rooms in lobby</td></tr>
				{{end}}
				</table>
				<pre id="LobbyMOTD">{{.Lobby.Motd}}</pre>
				{{/* <div class="text-start" id="AutohosterRooms">
				{{range $k, $el := .Hoster}}
					{{template "roomAutohoster" $el}}
				{{end}}
				</div> */}}
			</div>
		</div>
		{{if .UserAuthorized}}
		<script>
		function timeAgo(someDateInThePast) {
			var result = '';
			var difference = Date.now() - someDateInThePast;
			if (difference < 5 * 1000) {
				return 'just now';
			} else if (difference < 60 * 1000) {
				return `${Math.floor(difference / 1000 % 60)} seconds ago`;
			}
			if ((difference % 1000 * 3600) > 0) {
				if (Math.floor(difference / 1000 / 60 % 60) > 0) {
					let s = Math.floor(difference / 1000 / 60 % 60) == 1 ? '' : 's';
					result = `${Math.floor(difference / 1000 / 60 % 60)} minute${s} `;
				}
			}
			if ((difference % 1000 * 3600 * 60) > 0) {
				if (Math.floor(difference / 1000 / 60 / 60 % 24) > 0) {
					let s = Math.floor(difference / 1000 / 60 / 60 % 24) == 1 ? '' : 's';
					result = `${Math.floor(difference / 1000 / 60 / 60 % 24)} hour${s}${result == '' ? '' : ','} ` + result;
				}
			}
			if ((difference % 1000 * 3600 * 60 * 24) > 0) {
				if (Math.floor(difference / 1000 / 60 / 60 / 24) > 0) {
					let s = Math.floor(difference / 1000 / 60 / 60 / 24) == 1 ? '' : 's';
					result = `${Math.floor(difference / 1000 / 60 / 60 / 24)} day${s}${result == '' ? '' : ','} ` + result;
				}
			}
			return result + ' ago';
		}
		function color(c) {
			document.getElementById("LiveBlob").style.background = c
		}
		color("yellow")
		lobbytable = document.getElementById("LobbyTable")
		lobbymotd = document.getElementById("LobbyMOTD")
		wsurl = "wss://"+window.document.domain+"/api/ws/lobby"
		ws = new WebSocket(wsurl)
		function parsewsmessage(event) {
			let msg = JSON.parse(event.data);
			if(msg.type == "LobbyUpdate") {
				lobbymotd.textContent = msg.data.MOTD
				let filled = 1
				{{/* msg.data.Rooms.sort(function(a, b) {
					return a.GameID-b.GameID;
				}); */}}
				msg.data.Rooms.forEach(function(e) {
					let r = null
					if(filled >= lobbytable.children[0].childElementCount) {
						r = document.createElement("tr")
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						r.appendChild(document.createElement("td"))
						lobbytable.children[0].appendChild(r)
					} else {
						r = lobbytable.children[0].children[filled]
					}
					r.children[0].innerText = e.GameID
					r.children[1].innerText = e.CurrentPlayers+"/"+e.MaxPlayers
					r.children[2].innerText = e.GameName
					r.children[3].innerText = e.MapName
					r.children[4].innerText = e.HostName
					r.children[5].innerText = e.Version
					r.children[6].innerText = (e.Private?"Private ":"")+(e.Pure?"Map-mod ":"")
					if(e.History) {
						r.style.color = "gray";
						r.children[6].innerText += " " + timeAgo(new Date(e.LastSeen*1000))
					} else {
						r.style.color = "";
					}
					filled++
				})
				let cont = lobbytable.children[0].children
				while(filled < lobbytable.children[0].childElementCount) {
					cont[filled].parentNode.removeChild(cont[filled])
				}
				document.getElementById("LiveBlob").textContent = msg.data.Watching;
				document.getElementById("LiveBlob").classList.add('blob-animate');
				setTimeout(() => {
					document.getElementById("LiveBlob").classList.remove('blob-animate');
				}, 500);
			} else {
				console.log(msg)
			}
		}
		ws.onmessage = parsewsmessage
		ws.onopen = function() {color("red")}
		ws.onclose = function() {color("grey")}
		ws.onerror = function() {color("orange")}
		document.getElementById("LiveBlob").onclick = function() {
			if(ws == null || ws.readyState == 2 || ws.readyState == 3) {
				color("yellow")
				document.getElementById("LiveBlob").style.background = "yellow"
				ws = new WebSocket(wsurl)
				ws.onmessage = parsewsmessage
				ws.onopen = function() {color("red")}
				ws.onclose = function() {color("grey")}
			} else {
				ws.close()
				ws = null
				color("grey")
			}
		}
		</script>
		{{end}}
		<script>
		var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
		var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
			return new bootstrap.Tooltip(tooltipTriggerEl)
		})
		</script>
	</body>
</html>
{{end}}
