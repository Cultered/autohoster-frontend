{{define "index"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<meta content="Welp, that's a website" property="og:title">
		<meta content="Index page - it has some useful info on it" property="og:description">
		<meta content="https://wz2100-autohost.net/" property="og:url">
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
		<script src="https://github.com/chartjs/chartjs-plugin-zoom/releases/download/v1.1.1/chartjs-plugin-zoom.min.js"></script>
		<title>Autohoster main page</title>
	</head>
	<body>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
		{{template "NavPanel" . }}
		<div class=" py-5 container">
			<div class="row">
				<div class="col">
					<h3>Welcome to wz2100-autohost.net website</h3>
					<p>Home of Autohoster - automatic hosting system with ratings and replays.
						Everyone can request room and get dedicated host for Warzone 2100.
						Autohoster can read chat, respond to your commands and provide leaderbords.
						With authentication you can also proof to others that you are legit player.</p>
					<div class="row">
						<div class="col">
							<h5>Useful links</h5>
							<ul>
								<li><a href="/lobby">Web version of lobby</a></li>
								<li><a href="https://wz2100.euphobos.ru/maps">Map database</a></li>
								<li><a href="https://wz2100.net">Official website</a></li>
								<li><a href="https://discord.gg/qBWAaRQ9gU">Official discord</a></li>
							</ul>
							<p>We are accepting donations:
								<ul>
									<li><a href="https://opencollective.com/warzone2100">Open Collective</a></li>
								</ul>
							</p>
						</div>
						<div class="col col-7">
							<p>In past 48 hours:</p>
							{{if avail "LastGames" .}}Games played: {{.LastGames}}<br>{{end}}
							{{if avail "LastGamesMasterbal" .}}Games played on masterbalance: {{.LastGamesMasterbal}}<br>{{end}}
							{{if avail "LastGamesTiny" .}}Games played on Tiny_VautEdition: {{.LastGamesTiny}} {{.LastGamesTinyPrc}}<br>{{end}}
							{{if avail "LastPlayers" .}}Unique players: {{.LastPlayers}}<br>{{end}}
							{{if avail "LastGTime" .}}Time in-game: {{GameTimeToStringI .LastGTime}}<br>{{end}}
							{{if avail "LastProduced" .}}Produced units: {{.LastProduced}}<br>{{end}}
							{{if avail "LastBuilt" .}}Built structures: {{.LastBuilt}}<br>{{end}}
							{{if avail "LastRating" .}}Rating transferred: {{.LastRating}}<br>{{end}}
						</div>
					</div>
				</div>
				<div class="col" style="margin-left: 50px;">
					<h3>News</h3>
					<div style="overflow-y: scroll;overflow-x: clip;height: 24rem;">
						{{range $_, $v := .News}}
						<div class="callout callout-{{$v.Color}} m-1 p-1 ps-2">
							<div class="row"><div class="col"><h5>{{$v.Title}}</h5></div>
							<div class="col text-end">{{datefmt $v.Time}}</div></div>
							<div>
							{{$v.Content}}
							</div>
						</div>
						{{end}}
					</div>
				</div>
			</div>
			<div class="graphContainer" style="height:500px" id="GraphCanvasContainer">
				<canvas id="GraphCanvas"></canvas>
			</div>
			<script>
			function PlotData(JsonData) {
				const resp = JSON.parse(JsonData);
				let data = {};
				resp.forEach((i) => {
					const date = Object.keys(i)[0].split(" ")[0];
					const count = Object.values(i)[0];
					Object.assign(data, {[date]: count })
				});
				let avgData = {};
				let avgPast = 7;
				for(let i = avgPast; i < resp.length; i++) {
					// console.log(i, resp[i]);
					let avgv = 0;
					let avgc = avgPast;
					for(let j = 0; j < avgPast; j++) {
						avgv += Object.values(resp[i-j])[0]
					}
					const date = Object.keys(resp[i])[0].split(" ")[0];
					Object.assign(avgData, {[date]: avgv/avgc })
					// console.log(i, date, avgv/avgc);
				}
				let sortedDataKeys = Object.keys(data).sort();
				for(let i = 0; i <= 6 && i < resp.length; i++) {
					delete data[sortedDataKeys[i]];
				}
				// resp.forEach((i) => {
				// 	const date = Object.keys(i)[0].split(" ")[0];
				// 	const count = Object.values(i)[0];
				// 	Object.assign(data, {[date]: count })
				// });
				var ctx = document.getElementById('GraphCanvas').getContext('2d');
				document.getElementById('GraphCanvasContainer').classList.add('appear');
				var labels = Object.keys(data);
				chart = new Chart(ctx, {
					type: 'line', parsing: false, normalized: true,
					data: {labels: labels, datasets: [{
						label: 'Games count',
						data: data,
						borderColor: 'rgba(0, 119, 204, 0.3)',
						backgroundColor: 'rgba(0, 119, 204, 0.3)'
					},
					{
						label: 'Games 7 day average',
						data: avgData,
						borderColor: 'rgba(0, 119, 204, 1)',
						backgroundColor: 'rgba(0, 119, 204, 1)',
						tension: 0.4
					}]},
					options: {spanGaps: true, showLine: true,
						animation: {duration: 450}, responsive: true, maintainAspectRatio: false,
						plugins: {
							legend: {position: 'top'},
							title: {display: true, text: 'Games count', position: 'top'},
							zoom: {
								pan: {enabled: true, mode: 'x'},
								zoom: {
									wheel: {enabled: true},
									pinch: {enabled: true},
									mode: 'x',
								}
							}
						}, radius: 1,
						scales: {
						}
					}
				});
			}
			
				// x: {title: {display: true, text: 'time'}},
				// y : {stacked: false,
				// 	title: {display: true, text: 'Value'}
				// }
			document.addEventListener("DOMContentLoaded", function () {
				PlotData({{.GamesGraph}});
			});
			</script>
		</div>
	</body>
</html>
{{end}}
